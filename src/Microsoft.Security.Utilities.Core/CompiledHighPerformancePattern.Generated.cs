// <auto-generated/>

// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.
// See LICENSE file in the project root for full license information.

/*****************************************************************************
 * WARNING: AUTO-GENERATED. DO NOT MODIFY THE C# SOURCE FILE.
 *
 * To regenerate, select the 'Debug' configuration in Visual Studio, open the
 * .tt file and hit Ctrl+S to save. You can also regenerate by right-clicking on
 * the .tt file in Solution Explorer and selecting 'Run Custom Tool', or debug
 * the generation using 'Debug T4 Template'.
 *
 * NOTE: This is using T4 instead of a roslyn generator because we must generate
 * the regular expression constants as input to the the regex source generator.
 * It does not appear to be possible to chain rolsyn generators in this way.
 *****************************************************************************/

using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Microsoft.Security.Utilities;

partial class CompiledHighPerformancePattern
{
    /*lang=regex*/ private const string RawRegex0 = """^[a-zA-Z0-9]{52}.{4}9(?:9|D|H)[a-zA-Z0-9][A-L][a-zA-Z0-9]{16}[A-Za-z][a-zA-Z0-9]{7}(?:[a-zA-Z0-9]{2}==)?""";
    /*lang=regex*/ private const string RawRegex1 = """^[~.a-zA-Z0-9_\-]{3}.{3}[~.a-zA-Z0-9_\-]{31}""";
    /*lang=regex*/ private const string RawRegex2 = """^[~.a-zA-Z0-9_\-]{3}.{3}[~.a-zA-Z0-9_\-]{34}""";
    /*lang=regex*/ private const string RawRegex3 = """^[a-zA-Z0-9_\-]{44}.{4}[a-zA-Z0-9_\-]{5}[AQgw]==""";
    /*lang=regex*/ private const string RawRegex4 = """^[a-zA-Z0-9]{42}.{4}[A-D][a-zA-Z0-9]{5}""";
    /*lang=regex*/ private const string RawRegex5 = """^[a-zA-Z0-9+/]{33}.{4}[A-P][a-zA-Z0-9+/]{5}=""";
    /*lang=regex*/ private const string RawRegex6 = """^[a-zA-Z0-9+/]{76}.{4}[a-zA-Z0-9+/]{5}[AQgw]==""";
    /*lang=regex*/ private const string RawRegex7 = """^[a-zA-Z0-9+/]{42}.{4}[A-D][a-zA-Z0-9+/]{5}""";

    private static readonly Regex Regex0 = GetRegex0();
    private static readonly Regex Regex1 = GetRegex1();
    private static readonly Regex Regex2 = GetRegex2();
    private static readonly Regex Regex3 = GetRegex3();
    private static readonly Regex Regex4 = GetRegex4();
    private static readonly Regex Regex5 = GetRegex5();
    private static readonly Regex Regex6 = GetRegex6();
    private static readonly Regex Regex7 = GetRegex7();

    private static readonly CompiledHighPerformancePattern[] s_patterns = [
        new("+ABa", 76, 88, 88, Regex6),
        new("+ACR", 42, 52, 52, Regex7),
        new("+AEh", 33, 44, 44, Regex5),
        new("+AMC", 76, 88, 88, Regex6),
        new("+ARm", 33, 44, 44, Regex5),
        new("+ASb", 33, 44, 44, Regex5),
        new("+ASt", 76, 88, 88, Regex6),
        new("7Q~", 3, 37, 37, Regex1),
        new("8Q~", 3, 40, 40, Regex2),
        new("ACDb", 76, 88, 88, Regex6),
        new("AIoT", 33, 44, 44, Regex5),
        new("APIM", 76, 88, 88, Regex6),
        new("AzCa", 33, 44, 44, Regex5),
        new("AZEG", 33, 44, 44, Regex5),
        new("AzFu", 44, 56, 56, Regex3),
        new("AzSe", 42, 52, 52, Regex4),
        new("JQQJ", 52, 84, 88, Regex0),
    ];

    private static readonly Dictionary<string, CompiledHighPerformancePattern> s_patternsBySignature = s_patterns.ToDictionary(p => p.Signature);

#if NET8_0_OR_GREATER
    [GeneratedRegex(RawRegex0, Options)] private static partial Regex GetRegex0();
    [GeneratedRegex(RawRegex1, Options)] private static partial Regex GetRegex1();
    [GeneratedRegex(RawRegex2, Options)] private static partial Regex GetRegex2();
    [GeneratedRegex(RawRegex3, Options)] private static partial Regex GetRegex3();
    [GeneratedRegex(RawRegex4, Options)] private static partial Regex GetRegex4();
    [GeneratedRegex(RawRegex5, Options)] private static partial Regex GetRegex5();
    [GeneratedRegex(RawRegex6, Options)] private static partial Regex GetRegex6();
    [GeneratedRegex(RawRegex7, Options)] private static partial Regex GetRegex7();
#else
    private static Regex GetRegex0() => new(RawRegex0, Options);
    private static Regex GetRegex1() => new(RawRegex1, Options);
    private static Regex GetRegex2() => new(RawRegex2, Options);
    private static Regex GetRegex3() => new(RawRegex3, Options);
    private static Regex GetRegex4() => new(RawRegex4, Options);
    private static Regex GetRegex5() => new(RawRegex5, Options);
    private static Regex GetRegex6() => new(RawRegex6, Options);
    private static Regex GetRegex7() => new(RawRegex7, Options);
#endif
}

